#!/bin/bash

# ────────────── CONFIGURATION ──────────────

SERVER_URL="http://localhost:9000/"
DEST_DIR="/exu/exegol-update-client"
DEFAULT_REPO="nwodtuhs/exegol"
NEW_IMAGE_NAME="FreeNightly"

# ────────────── COULEURS ──────────────

BLUE="\033[1;34m"
GREEN="\033[1;32m"
RED="\033[1;31m"
YELLOW="\033[1;33m"
RESET="\033[0m"

info()    { echo -e "${BLUE}[*]${RESET} $1"; }
success() { echo -e "${GREEN}[+]${RESET} $1"; }
error()   { echo -e "${RED}[-]${RESET} $1"; }
prompt()  { echo -ne "${YELLOW}[?]${RESET} $1"; }

# ────────────── AIDE ──────────────

manual() {
    echo -e "${BLUE}[*]${RESET} Utilisation : $0 [options]\n"
    echo -e "${GREEN}DESCRIPTION${RESET}"
    echo -e "  Ce script permet de charger automatiquement des images Docker Exegol au format .tar"
    echo -e "  depuis un serveur HTTP (Nginx) ou un fichier local déjà téléchargé.\n"
    echo -e "${GREEN}OPTIONS DISPONIBLES${RESET}"
    echo -e "  ${YELLOW}--list, -l${RESET}           Liste les fichiers .tar disponibles sur le serveur"
    echo -e "  ${YELLOW}--force, -f${RESET}          Force le téléchargement même si le fichier est déjà présent"
    echo -e "  ${YELLOW}--load-only${RESET}          Charge un .tar local sans contact serveur"
    echo -e "  ${YELLOW}--tag=[nom:tag||tag]${RESET} Re-tag l'image après chargement (formats valides : nom:tag ou tag seul)"
    echo -e "  ${YELLOW}--auto, -a${RESET}           Active un mode automatique"
    echo -e "  ${YELLOW}--server=[URL]${RESET}       Change l'URL du serveur (format: http://HOST:PORT)"
    echo -e "  ${YELLOW}--check-commit${RESET}       Vérifie et affiche s'il y a un nouveau commit disponible"
    echo -e "  ${YELLOW}-h, --help${RESET}           Affiche cette aide"
    exit 0
}

# ────────────── PARSING ──────────────

LIST_MODE=false
FORCE_MODE=false
LOAD_ONLY_MODE=false
AUTO_MODE=false
CHECK_COMMIT_MODE=false
TAG_NAME=""
CUSTOM_SERVER_URL=""

for arg in "$@"; do
    case "$arg" in
        --list|-l) LIST_MODE=true ;;
        --force|-f) FORCE_MODE=true ;;
        --load-only) LOAD_ONLY_MODE=true ;;
        --auto|-a) AUTO_MODE=true ;;
        --check-commit) CHECK_COMMIT_MODE=true ;;
        --tag=*) TAG_NAME="${arg#*=}" ;;
        --server=*) CUSTOM_SERVER_URL="${arg#*=}" ;;
        -h|--help) manual ;;
        *) ;;
    esac
done

# ────────────── VALIDATION URL SERVEUR ──────────────

if [[ -n "$CUSTOM_SERVER_URL" ]]; then
    # Validation du format de l'URL (accepte IP et noms de domaine)
    if [[ "$CUSTOM_SERVER_URL" =~ ^https?://[a-zA-Z0-9.-]+:[0-9]+/?$ ]]; then
        SERVER_URL="$CUSTOM_SERVER_URL"
        # S'assurer que l'URL se termine par /
        [[ "$SERVER_URL" != */ ]] && SERVER_URL="${SERVER_URL}/"
        info "Serveur personnalisé configuré : $SERVER_URL"
    else
        error "Format d'URL invalide. Utilisez le format : http://HOST:PORT ou https://HOST:PORT"
        error "Exemples : --server=http://192.168.1.100:9000"
        error "          --server=https://exegol-server.local:8443"
        error "          --server=http://exegol.example.com:9000"
        exit 1
    fi
fi

# ────────────── VÉRIFICATION COMMIT ──────────────

if $CHECK_COMMIT_MODE; then
    info "Vérification des nouveaux commits sur le serveur..."
    
    # Récupérer le hash du dernier commit depuis le serveur
    SERVER_COMMIT_HASH=$(curl -s "$SERVER_URL/latest_commit.hash")
    
    if [[ -z "$SERVER_COMMIT_HASH" ]]; then
        error "Impossible de récupérer le hash du dernier commit depuis le serveur."
        exit 1
    fi
    
    # Vérifier si on a un fichier de hash local
    LOCAL_HASH_FILE="$DEST_DIR/latest_commit.hash"
    if [[ -f "$LOCAL_HASH_FILE" ]]; then
        LOCAL_COMMIT_HASH=$(cat "$LOCAL_HASH_FILE")
        
        if [[ "$SERVER_COMMIT_HASH" = "$LOCAL_COMMIT_HASH" ]]; then
            echo -e "${RED}[-]${RESET} Pas de nouveau commit"
        else
            echo -e "${GREEN}[+]${RESET} Nouveau commit disponible"
        fi
    else
        echo -e "${GREEN}[+]${RESET} Nouveau commit disponible"
    fi
    
    exit 0
fi

mkdir -p "$DEST_DIR"

# ────────────── MODE LOAD-ONLY ──────────────

if $LOAD_ONLY_MODE; then
    info "Mode --load-only activé : recherche de fichiers locaux dans $DEST_DIR"
    LOCAL_TARS=$(find "$DEST_DIR" -type f -name '*.tar' | sort)
    if [ -z "$LOCAL_TARS" ]; then
        error "Aucun fichier .tar trouvé localement."
        exit 1
    fi

    echo
    info "Fichiers disponibles localement :"
    echo "$LOCAL_TARS" | nl -w2 -s'. '
    if ! $AUTO_MODE; then
        prompt "Quel fichier souhaitez-vous charger ? (numéro) : "
        read -r INDEX
    else
        INDEX=1
        info "Mode auto : sélection du premier fichier ($INDEX)"
    fi
    SELECTED_LOCAL=$(echo "$LOCAL_TARS" | sed -n "${INDEX}p")

    if [[ -z "$SELECTED_LOCAL" ]]; then
        error "Sélection invalide."
        exit 1
    fi

    info "Chargement de $(basename "$SELECTED_LOCAL")..."
    LOAD_OUT=$(docker load -i "$SELECTED_LOCAL" 2>&1) || {
        error "Échec docker load."; exit 1;
    }
    success "Image Docker chargée."
    echo "$LOAD_OUT"

    LOADED_NAME=$(echo "$LOAD_OUT" | grep 'Loaded image:' | awk -F': ' '{print $2}')
    if [[ -z "$TAG_NAME" ]]; then
        TAG_NAME="${DEFAULT_REPO}:$NEW_IMAGE_NAME"
        info "Aucun tag spécifié. Utilisation par défaut : $TAG_NAME"
    elif [[ "$TAG_NAME" != */* && "$TAG_NAME" != *:* ]]; then
        TAG_NAME="${DEFAULT_REPO}:${TAG_NAME}"
    fi

    if docker image inspect "$TAG_NAME" &>/dev/null; then
        if ! $AUTO_MODE; then
            prompt "Image $TAG_NAME existe. Supprimer ? (y/N) : "
            read -r CONFIRM
        else
            CONFIRM=Y
            info "Mode auto : suppression de l'image existante ($TAG_NAME)"
        fi
        [[ "$CONFIRM" =~ ^[Yy]$ ]] && docker image rm "$TAG_NAME" &>/dev/null && success "Image supprimée : $TAG_NAME" || {
            error "Abandon."; exit 1;
        }
    fi

    if [[ -n "$LOADED_NAME" ]]; then
        docker tag "$LOADED_NAME" "$TAG_NAME"
        docker image rm "$LOADED_NAME" &>/dev/null
        success "Retaggée : $TAG_NAME"
    fi
    exit 0
fi

# ────────────── MODE SERVEUR ──────────────

info "Récupération des fichiers .tar depuis le serveur..."
FILE_LIST=$(curl -s "$SERVER_URL/" | grep -oP 'href="[^"]+\.tar"' | cut -d'"' -f2)

[[ -z "$FILE_LIST" ]] && { error "Aucun .tar trouvé."; exit 1; }

if $LIST_MODE; then
    echo
    info "Fichiers disponibles sur serveur :"
    echo "$FILE_LIST" | nl -w2 -s'. '
    if ! $AUTO_MODE; then
        prompt "Sélection (numéro) : "
        read -r INDEX
    else
        INDEX=1
        info "Mode auto : sélection du premier fichier ($INDEX)"
    fi
    SELECTED=$(echo "$FILE_LIST" | sed -n "${INDEX}p")
    [[ -z "$SELECTED" ]] && { error "Sélection invalide."; exit 1; }
    TAR_NAME=$(basename "$SELECTED")
else
    TAR_NAME=$(basename $(echo "$FILE_LIST" | sort -r | head -n 1))
    info "Dernier fichier disponible : $TAR_NAME"
fi

TAR_URL="$SERVER_URL/$TAR_NAME"
LOCAL_PATH="$DEST_DIR/$TAR_NAME"

if [[ -f "$LOCAL_PATH" && "$FORCE_MODE" = false ]]; then
    info "Le fichier $TAR_NAME est déjà présent localement."
    info "Aucun chargement ne sera effectué."
    exit 0
else
    if ! $AUTO_MODE; then
        prompt "Voulez-vous télécharger puis charger ce fichier ? (Y/n) : "
        read -r YES
    else
        YES=Y
        info "Mode auto : téléchargement automatique."
    fi
    [[ -n "$YES" && ! "$YES" =~ ^[Yy]$ ]] && { info "Téléchargement annulé."; exit 0; }

    info "Téléchargement de $TAR_NAME..."
    curl -fSL "$TAR_URL" -o "$LOCAL_PATH" || {
        error "Échec du téléchargement."; exit 1;
    }
    success "Téléchargement terminé."
    
    # Mettre à jour le hash du commit local
    curl -s "$SERVER_URL/latest_commit.hash" -o "$DEST_DIR/latest_commit.hash" 2>/dev/null || {
        info "Impossible de récupérer le hash du commit (non critique)"
    }
fi

info "Chargement de l'image Docker depuis $TAR_NAME..."
LOAD_OUT=$(docker load -i "$LOCAL_PATH" 2>&1) || {
    error "Échec docker load."; exit 1;
}
success "Image Docker chargée."
echo "$LOAD_OUT"

LOADED_NAME=$(echo "$LOAD_OUT" | grep 'Loaded image:' | awk -F': ' '{print $2}')
if [[ -z "$TAG_NAME" ]]; then
    TAG_NAME="${DEFAULT_REPO}:$NEW_IMAGE_NAME"
    info "Aucun tag spécifié. Utilisation par défaut : $TAG_NAME"
elif [[ "$TAG_NAME" != */* && "$TAG_NAME" != *:* ]]; then
    TAG_NAME="${DEFAULT_REPO}:${TAG_NAME}"
fi

if docker image inspect "$TAG_NAME" &>/dev/null; then
    if ! $AUTO_MODE; then
        prompt "Image $TAG_NAME existe. Supprimer ? (y/N) : "
        read -r CONFIRM
    else
        CONFIRM=Y
        info "Mode auto : suppression de l'image existante ($TAG_NAME)"
    fi
    [[ "$CONFIRM" =~ ^[Yy]$ ]] && docker image rm "$TAG_NAME" &>/dev/null && success "Image supprimée : $TAG_NAME" || {
        error "Abandon."; exit 1;
    }
fi

if [[ -n "$LOADED_NAME" ]]; then
    docker tag "$LOADED_NAME" "$TAG_NAME"
    docker image rm "$LOADED_NAME" &>/dev/null
    success "Retaggée : $TAG_NAME"
fi

if ! $AUTO_MODE; then
    prompt "Supprimer le fichier $TAR_NAME ? (y/N) : "
    read -r CONFIRM_DELETE
else
    CONFIRM_DELETE=N
    info "Mode auto : le fichier est conservé."
fi
[[ "$CONFIRM_DELETE" =~ ^[Yy]$ ]] && rm -f "$LOCAL_PATH" && success "Fichier supprimé." || info "Fichier conservé."

